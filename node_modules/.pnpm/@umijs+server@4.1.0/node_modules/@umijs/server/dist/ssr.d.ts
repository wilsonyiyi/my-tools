import React from 'react';
import type { UmiRequest } from './types';
interface RouteLoaders {
    [key: string]: () => Promise<any>;
}
export declare type ServerInsertedHTMLHook = (callbacks: () => React.ReactNode) => void;
interface CreateRequestServerlessOptions {
    /**
     * folder path for `build-manifest.json`
     */
    sourceDir?: string;
}
interface CreateRequestHandlerOptions extends CreateRequestServerlessOptions {
    routesWithServerLoader: RouteLoaders;
    PluginManager: any;
    manifest: ((sourceDir?: string) => {
        assets: Record<string, string>;
    }) | {
        assets: Record<string, string>;
    };
    getPlugins: () => any;
    getValidKeys: () => any;
    getRoutes: (PluginManager: any) => any;
    getClientRootComponent: (PluginManager: any) => any;
    createHistory: (opts: any) => any;
    helmetContext?: any;
    ServerInsertedHTMLContext: React.Context<ServerInsertedHTMLHook | null>;
}
export declare function createMarkupGenerator(opts: CreateRequestHandlerOptions): (url: string) => Promise<unknown>;
export default function createRequestHandler(opts: CreateRequestHandlerOptions): (req: any, res: any, next: any) => Promise<any>;
export declare function createUmiHandler(opts: CreateRequestHandlerOptions): (req: UmiRequest, params?: CreateRequestHandlerOptions) => Promise<NodeJS.ReadableStream>;
export declare function createUmiServerLoader(opts: CreateRequestHandlerOptions): (req: UmiRequest) => Promise<any>;
export {};
